{
    "openapi": "3.0.0",
    "info": {
        "title": "Delivery Promise Notificaton API",
        "version": "1.0.0",
        "description": "[Delivery Promise (Beta)](https://help.vtex.com/en/tutorial/delivery-promise-beta--p9EJH9GgxL0JceA6dBswd) is VTEX's new solution that allows customers to view only the products they can buy in their shopping experience, considering both the product availability and valid shipping methods for their delivery address. The Delivery Promise Notificaton API notifies the VTEX store of the seller's product availability and delivery promises.\r\n\r\n>ℹ️ This feature is in beta, which means that we are working to improve it. If you have any questions, please contact our [Support Center](https://support.vtex.com/hc/en-us/requests).\r\n\r\n### Delivery Promise\r\n\r\n- `PUT` [Update product availability](https://developers.vtex.com/docs/api-reference/delivery-promise-notification-api#put-/delivery-promises/external-sellers/-sellerId-/products)"
    },
    "servers": [
        {
            "url": "https://{accountName}.{environment}.com.br/api",
            "description": "VTEX server URL.",
            "variables": {
                "accountName": {
                    "description": "Name of the VTEX account. Used as part of the URL.",
                    "default": "apiexamples"
                },
                "environment": {
                    "description": "Environment to use. Used as part of the URL.",
                    "enum": [
                        "vtexcommercestable"
                    ],
                    "default": "vtexcommercestable"
                }
            }
        }
    ],
    "paths": {
        "/delivery-promises/external-sellers/{sellerId}/products": {
            "put": {
                "summary": "Update product availability",
                "description": "Notifies VTEX of changes in product availability and delivery promises.",
                "tags": [
                    "Delivery Promise"
                ],
                "parameters": [
                    {
                        "name": "sellerId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The seller’s ID registered in the marketplace."
                    },
                    {
                        "name": "an",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The account name receiving the notification."
                    },
                    {
                        "$ref": "#/components/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/components/parameters/Accept"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "itemId": {
                                            "type": "string",
                                            "description": "The SKU ID of the item."
                                        },
                                        "productId": {
                                            "type": "string",
                                            "description": "The product ID."
                                        },
                                        "availability": {
                                            "type": "integer",
                                            "description": "Total available items."
                                        },
                                        "promises": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "availability": {
                                                        "type": "integer",
                                                        "description": "Available items for this delivery promise."
                                                    },
                                                    "deliveryChannel": {
                                                        "type": "string",
                                                        "enum": [
                                                            "delivery",
                                                            "pickup-in-point"
                                                        ],
                                                        "description": "Delivery channel type."
                                                    },
                                                    "deliveryZoneIds": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "description": "Delivery zones where the item is available."
                                                    },
                                                    "deliveryInfo": {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string",
                                                                "description": "ID of the delivery method."
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "description": "Display name of the delivery method."
                                                            },
                                                            "deliveryTime": {
                                                                "type": "string",
                                                                "description": "Estimated delivery time in dd.hh:mm:ss format."
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Request accepted successfully."
                    },
                    "400": {
                        "description": "Bad request: Invalid JSON or non-registered items."
                    },
                    "401": {
                        "description": "Unauthorized: Invalid app key/token."
                    },
                    "403": {
                        "description": "Forbidden: Inadequate permissions."
                    },
                    "404": {
                        "description": "Not found: Seller ID not found."
                    },
                    "429": {
                        "description": "Too many requests: Request limit exceeded."
                    },
                    "500": {
                        "description": "Internal server error: Unexpected application failure."
                    }
                },
                "security": [
                    {
                        "appKey": [],
                        "appToken": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "appKey": {
                "type": "apiKey",
                "in": "header",
                "name": "X-VTEX-API-AppKey",
                "description": "Unique identifier of the [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys)."
            },
            "appToken": {
                "type": "apiKey",
                "in": "header",
                "name": "X-VTEX-API-AppToken",
                "description": "Secret token of the [application key](https://developers.vtex.com/docs/guides/api-authentication-using-application-keys)."
            },
            "VtexIdclientAutCookie": {
                "type": "apiKey",
                "in": "header",
                "name": "VtexIdclientAutCookie",
                "description": "[User token](https://developers.vtex.com/docs/guides/api-authentication-using-user-tokens), valid for 24 hours."
            }
        },
        "parameters": {
            "Content-Type": {
                "name": "Content-Type",
                "in": "header",
                "description": "Type of the content being sent.",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "default": "application/json"
                }
            },
            "Accept": {
                "name": "Accept",
                "in": "header",
                "description": "HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.",
                "required": true,
                "style": "simple",
                "schema": {
                    "type": "string",
                    "default": "application/json"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Delivery Promise",
            "description": "Operations related to the delivery promise."
        }
    ]
}
